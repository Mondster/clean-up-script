---

```markdown
# Cleanup Script Setup for gsoc-project Folder

This guide outlines the steps required to perform an initial cleanup of the `gsoc-project` folder, create a cleanup script to remove old logs, and schedule the script to run every 30 minutes using cron.

## Step 0: Perform an Initial Full Cleanup

**Note:** This step completely clears the `gsoc-project` folder. **Use with caution.**

1. **Open a terminal and run the following command:**

   ```bash
   sudo rm -rf /opt/syslog-ng/gsoc-project/*
   ```

2. **Verify that the folder is empty:**

   ```bash
   ls -la /opt/syslog-ng/gsoc-project/
   ```

## Step 1: Create the Cleanup Script

1. **Open a terminal and create a new script file.**  
   For example, you can store it in `/usr/local/bin/`:

   ```bash
   sudo nano /usr/local/bin/cleanup_gsoc_project.sh
   ```

2. **Paste the following script content into the file:**

   ```bash
   #!/bin/bash
   # cleanup_gsoc_project.sh
   # This script removes *.log files in the gsoc-project folder that are older than 1 day.
   #
   # Usage: Run this script periodically (e.g., every 30 minutes via cron) to ensure that only today's logs remain.
   #
   # Set the root directory for gsoc-project logs:
   LOG_DIR="/opt/syslog-ng/gsoc-project"

   # Number of days to keep logs (1 means only today's logs will be kept):
   RETENTION_DAYS=1

   # Check if the directory exists
   if [ ! -d "$LOG_DIR" ]; then
       echo "Directory $LOG_DIR does not exist. Exiting."
       exit 1
   fi

   echo "[$(date)] Starting cleanup for $LOG_DIR: removing *.log files older than $RETENTION_DAYS day(s)."

   # Find and remove log files older than RETENTION_DAYS.
   find "$LOG_DIR" -type f -name "*.log" -mtime +$RETENTION_DAYS -exec rm -f {} \;

   echo "[$(date)] Cleanup completed successfully."
   ```

3. **Save and exit the editor:**  
   If using nano, press `Ctrl+O` to write out the file, then `Enter` to confirm, and `Ctrl+X` to exit.

## Step 2: Make the Script Executable

Run the following command to set the proper permissions:

```bash
sudo chmod +x /usr/local/bin/cleanup_gsoc_project.sh
```

## Step 3: Test the Script Manually

Run the script to ensure it works as expected:

```bash
/usr/local/bin/cleanup_gsoc_project.sh
```

Check the output in the terminal and verify that any `*.log` files older than one day are removed.

## Step 4: Schedule the Script with Cron to Run Every 30 Minutes

1. **Open your crontab for editing:**

   ```bash
   crontab -e
   ```

2. **Add the following line at the end of the file:**

   ```cron
   */30 * * * * /usr/local/bin/cleanup_gsoc_project.sh >> /var/log/cleanup_gsoc_project.log 2>&1
   ```

   **Explanation:**
   - `*/30 * * * *` runs the script every 30 minutes.
   - The output (both standard output and errors) is appended to `/var/log/cleanup_gsoc_project.log` for monitoring.

3. **Save and exit the crontab editor:**  
   If using nano, press `Ctrl+O` to save, `Enter` to confirm, then `Ctrl+X` to exit.

## Step 5: Verify the Cron Job

- **List your cron jobs to confirm the new entry is present:**

  ```bash
  crontab -l
  ```

- **Monitor the log file to check that the script runs as scheduled:**

  ```bash
  tail -f /var/log/cleanup_gsoc_project.log
  ```

---
